[] EC-probe in Yagiura's algo
Nswap in Yagiura's local search is the mutation operator in GA. Nshift is the change of a job's assignment (bin assignment), not exchange. Nejct(s) is the local improvement (solution quality/feasibility) mechanisms used by Chu. But in Chu's algorithm, it is applied only once, while in Yagiura's implementation, Neject(s) basically searches all the neighboring solutions around a solution s. Therefore, in current GA implementation, Nswap and Nejct(s) operators are already implemented. 

EC is applied on path-relinking's output, a solution set S whose size is fixed and is a parameter.

[] path relinking in Yagiura's algo
- path relinking is applied on a set of reference solutions, the set R. R is like the population in GA. Like parent selection in GA, path relinking selects 2 solutions from R randomly, one as reference solution and the other as the one to be operated. Instead of generating only one child in GA after GA operations, path relinking generates a set of solutions S whose size is fixed and is also a parameter. S selects best solutions from d solutions generated by path-relinking operator. d is the distance between the two selected solutions
- path relinking: It is a loop of d from 1 to d-1. Each iteration generates a solution from the Nshift operation on previous iteration's output solution. For example, suppose the solution generated for i-1 (i belongs to [1..d-1]) is $s_{i-1}$. Nshift is applied on this solution to find solutions with distance i. From these solutions with distance i, the one with best objective function value is selection as the solution for ith iteration. And so on.

[] parallelization
first step might be loosely-coupled parallelism: let all processors do the EC and PR independently but simultaneously, just like the island model does for subpopulation evolution. Then, we can probably design migration strategies to exchange solutions in R and S? Yeah, that might work!

[] PR for gap
I want to combine GA and PR: GA can produce large amount of chromosomes for parallel evolution; PR can greatly improve solution quality per iteration. However, consider 1 million iterations, how many search space will be searched for more than once? A lot, I would say. Especially in later stage, all new individuals will be crammed in a tiny area. It is just a wild guess.

For GAP, I refer to Yagiura's impl.

[] what exactly are PR and EC?
EC operates on one solution, PR operates on one but based on the distance to the other. What are they? How does it help GA operators?


